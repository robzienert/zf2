<?php
/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://framework.zend.com/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    Zend_Service
 * @subpackage Audioscrobbler
 * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id$
 */

/**
 * @namespace
 */
namespace Zend\Service\Audioscrobbler;

/**
 * @category   Zend
 * @package    Zend_Service
 * @subpackage Audioscrobbler
 * @copyright  Copyright (c) 2005-2010 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */
class Track extends Audioscrobbler
{
    /**
     * Tag an album using a list of user supplied tags. This service requires
     * user authentication.
     *
     * Required params:
     * - artist
     * - track
     * - tags
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function addTags(array $params = array())
    {
        $this->requireParams($params, array('artist', 'track', 'tags'));

        $this->validateListLength($params['tags'], 'tags');

        return $this->doSignedCall('track.addTags', $params);
    }

    /**
     * Ban a track for a given user profile. This needs to be supplemented with
     * a scrobbling submission containing the 'ban' rating (see the
     * audioscrobbler API). This service requires user authentication.
     *
     * Required params:
     * - track
     * - artist
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function ban(array $params = array())
    {
        $this->requireParams($params, array('track', 'artist'));

        return $this->doSignedCall('track.ban', $params);
    }

    /**
     * Get a list of Buy Links for a particular Track. It is required that you
     * supply either the artist and track params or the mbid param.
     *
     * Optional params:
     * - artist
     * - track
     * - mbid
     * - country
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getBuyLinks(array $params = array())
    {
        $this->requireParams($params, array('artist', 'track', 'mbid', 'country'));

        return $this->doCall('track.getBuyLinks', $params);
    }

    /**
     * Retrieve track metadata associated with a fingerprint id generated by the
     * Last.fm Fingerprinter. Returns track elements, along with a 'rank' value
     * between 0 and 1 reflecting the confidence for each match.
     * @link http://blog.last.fm/2010/07/09/fingerprint-api-and-app-updated
     *
     * Required params:
     * - fingerprintid
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getFingerprintMetadata(array $params = array())
    {
        $this->requireParams($params, array('fingerprintid'));

        return $this->doCall('track.getFingerprintMetadata');
    }

    /**
     * Get the metadata for a track on Last.fm using the artist/track name or a
     * musicbrainz id.
     *
     * Optional params:
     * - artist
     * - track
     * - mbid
     * - username
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getInfo(array $params = array())
    {
        $this->compareParams($params, array('artist', 'track', 'mbid', 'username'));

        if (!isset($params['mbid'])
            && (!isset($params['artist']) || !isset($params['track']))
        ) {
            throw new InvalidArgumentException(
                'It is required that you supply either the artist and track params or the mbid param');
        }

        return $this->doCall('track.getInfo', $params);
    }

    /**
     * Get the similar tracks for this track on Last.fm, based on listening data.
     *
     * Optional params:
     * - track
     * - artist
     * - mbid
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getSimilar(array $params = array())
    {
        $this->compareParams($params, array('track', 'artist', 'mbid'));

        if (!isset($params['mbid'])
            && (!isset($params['artist']) || !isset($params['track']))
        ) {
            throw new InvalidArgumentException(
                'It is required that you supply either the artist and track params or the mbid param');
        }

        return $this->doCall('track.getSimilar', $params);
    }

    /**
     * Get the tags applied by an individual user to a track on Last.fm. This
     * service requires user authentication.
     *
     * Required params:
     * - artist
     * - track
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getTags(array $params = array())
    {
        $this->requireParams($params, array('artist', 'track'));

        return $this->doSignedCall('track.getTags', $params);
    }

    /**
     * Get the top fans for this track on Last.fm, based on listening data.
     * Supply either track & artist name or musicbrainz id.
     *
     * Optional params:
     * - track
     * - artist
     * - mbid
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getTopFans(array $params = array())
    {
        $this->compareParams($params, array('track', 'artist', 'mbid'));
        
        if (!isset($params['mbid'])
            && (!isset($params['artist']) || !isset($params['track']))
        ) {
            throw new InvalidArgumentException(
                'It is required that you supply either the artist and track params or the mbid param');
        }

        return $this->doCall('track.getTopFans', $params);
    }

    /**
     * Get the top tags for this track on Last.fm, ordered by tag count. Supply
     * either track & artist name or mbid.
     *
     * Optional params:
     * - track
     * - artist
     * - mbid
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function getTopTags(array $params = array())
    {
        $this->compareParams($params, array('track', 'artist', 'mbid'));

        if (!isset($params['mbid'])
            && (!isset($params['artist']) || !isset($params['track']))
        ) {
            throw new InvalidArgumentException(
                'It is required that you supply either the artist and track params or the mbid param');
        }

        return $this->doCall('track.getTopTags', $params);
    }

    /**
     * Love a track for a user profile. This needs to be supplemented with a
     * scrobbling submission containing the 'love' rating (see the
     * audioscrobbler API). This service requires user authentication.
     *
     * Required params:
     * - track
     * - artist
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function love(array $params = array())
    {
        $this->requireParams($params, array('track', 'artist'));

        return $this->doCall('track.love');
    }

    /**
     * Remove a user's tag from a track. This service requires user
     * authentication.
     *
     * Required params:
     * - artist
     * - track
     * - tag
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function removeTag(array $params = array())
    {
        $this->requireParams($params, array('artist', 'track', 'tag'));

        return $this->doSignedCall('track.removeTag', $params);
    }

    /**
     * Search for a track by track name. Returns track matches sorted by
     * relevance.
     *
     * Required params:
     * - track
     *
     * Optional params:
     * - limit
     * - page
     * - artist
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function search(array $params = array())
    {
        $this->requireParams($params, array('track'));
        $this->compareParams($params, array('track', 'limit', 'page', 'artist'));

        $between = new BetweenValidator(array('min' => 1, 'max' => 30, 'inclusive' => true));
        if (isset($params['limit']) && !$between->isValid($params['limit'])) {
            throw new InvalidArgumentException('The value provided for the `limit` parameter is not valid');
        }

        return $this->doCall('track.search', $params);
    }

    /**
     * Share a track twith one or more Last.fm users or other friends. This
     * service requires user authentication.
     *
     * Required params:
     * - artist
     * - track
     * - recipient
     *
     * Optional params:
     * - public
     * - message
     *
     * @param array $params An associative array of the request params
     * @return Zend\Rest\Client\Result
     * @throws InvalidArgumentException If any params are invalid
     */
    public function share(array $params = array())
    {
        $this->requireParams($params, array('artist', 'track', 'recipient'));
        $this->compareParams($params, array('artist', 'track', 'recipient',
                                            'public', 'message'));

        $this->validateListLength($params['recipient'], 'recipient');

        return $this->doSignedCall('track.share', $params);
    }
}